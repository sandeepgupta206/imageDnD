[{"C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\index.js":"1","C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\App.js":"2","C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\TestOne.js":"3","C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\TestTwo.js":"4","C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\reportWebVitals.js":"5","C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\TestThree.js":"6","C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\TestFour.js":"7"},{"size":795,"mtime":1653477734524,"results":"8","hashOfConfig":"9"},{"size":1838,"mtime":1653471772342,"results":"10","hashOfConfig":"9"},{"size":2386,"mtime":1653475893143,"results":"11","hashOfConfig":"9"},{"size":1889,"mtime":1653471702935,"results":"12","hashOfConfig":"9"},{"size":375,"mtime":1653455599265,"results":"13","hashOfConfig":"9"},{"size":2367,"mtime":1653476244348,"results":"14","hashOfConfig":"9"},{"size":4042,"mtime":1653560522448,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},"1atn2cs",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\index.js",["43","44","45","46"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport TestOne from './TestOne';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport TestTwo from './TestTwo';\r\nimport TestThree from './TestThree';\r\nimport TestFour from './TestFour';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n  {/* <TestOne /> */}\r\n    {/* <TestTwo /> */}\r\n    {/* <TestThree /> */}\r\n    <TestFour />\r\n    {/* <App /> */}\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",[],"C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\App.js",["47","48"],[],"import \"./App.css\";\r\nimport React,{useState,useEffect} from \"react\";\r\n\r\n function App() {\r\n\r\nconst [text, settext] = useState();\r\n\r\nconst [file, setfile] = useState()\r\n\r\n\r\n  const indexedDB =\r\n    window.indexedDB ||\r\n    window.mozIndexedDB ||\r\n    window.webkitIndexedDB ||\r\n    window.msIndexedDB ||\r\n    window.shimIndexedDB;\r\n\r\n  if (!indexedDB) {\r\n    console.log(\"IndexedDB could not be found in this browser.\");\r\n  }\r\n\r\n const addData =(e)=>{\r\n   e.preventDefault();\r\n\r\n\r\n\r\n  const requestDB = window.indexedDB.open('imgDB');\r\n\r\n  requestDB.onupgradeneeded=()=>{\r\n    let db = requestDB.result;\r\n  let store =  db.createObjectStore('imageDB', {\r\n      autoIncrement:true\r\n    });\r\n\r\n    // put method\r\n\r\n    store.add({imageName:text, img:file})\r\n  }\r\n\r\n  settext('');\r\nsetfile();\r\nrequestDB.onsuccess = ()=>{\r\n  if(requestDB.readyState == 'done'){\r\n    console.log('data added successfully into indexedDB')\r\n  }\r\n \r\n}\r\n\r\n }\r\n\r\n console.log(file);\r\n\r\n\r\n \r\n\r\n  return (\r\n    <>\r\n      <div style={{margin:'25% 40%', padding:'25px'}}>\r\n        <form>\r\n        <input\r\n        type='text'\r\n        value={text}\r\n        onChange={(e)=>settext(e.target.value)}\r\n        placeholder='Enter Image lable'\r\n        >\r\n        </input>\r\n        <h3>Drag and Drop here</h3>\r\n        <span \r\n         style={{backgroundColor:'lightGrey', padding:'10%'}}\r\n        >\r\n          <input\r\n          style={{backgroundColor:'lightGrey', height:'10%', width:'100%'}}\r\n          type='file'\r\n          // value={file}\r\n          multiple\r\n          onChange={(e)=>setfile(e.target.files[0])}\r\n          >\r\n          </input>\r\n        </span>\r\n        <br />\r\n        <br />\r\n        <button\r\n        onClick={addData}\r\n        >\r\n          add data\r\n        </button>\r\n        </form>\r\n\r\n      </div>\r\n    </>\r\n  );\r\n  }\r\n\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\TestOne.js",["49","50"],[],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction TestOne() {\r\n  const [text, settext] = useState('');\r\n\r\n  const [file, setfile] = useState('');\r\n\r\n  \r\n  var db = null;\r\n  var objectStore = null;\r\n  var store;\r\n  var requestDB;\r\n  var transaction;\r\n  console.log(text);\r\n  console.log(file);\r\n\r\n  (function () {\r\n    requestDB = window.indexedDB.open(\"imgDB\");\r\n\r\n    requestDB.onupgradeneeded = () => {\r\n       db = requestDB.result;\r\n       console.log(db) ;\r\n      store = db.createObjectStore(\"imageDB\", {\r\n        autoIncrement: true,\r\n     \r\n      });\r\n      console.log(db)\r\n     \r\n    };\r\n  })();\r\n\r\n\r\n  const addData = (e) => {\r\n    \r\n    e.preventDefault();\r\n    // store.put({imageName:text, img:file})\r\n    let formData = {\r\n      title:text,\r\n     image: file,\r\n    };\r\n    transaction=requestDB.result.transaction(\"imageDB\", \"readwrite\");\r\n    console.log(db)\r\n    \r\n    transaction.oncomplete = (value) => {\r\n      console.log(value);\r\n    };\r\n\r\n    transaction.onerror = (err) => {\r\n      console.log(err);\r\n    };\r\n\r\n    store = transaction.objectStore(\"imageDB\");\r\n    let request = store.put(formData);\r\n\r\n    request.onsuccss = (ele) => {\r\n      console.log(\"successfully added\");\r\n    };\r\n\r\n    request.onerror = (ele) => {\r\n      console.log(\"got error\");\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ width: \"150px \", height:\"250px\", padding: \"5px\" }}>\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => settext(e.target.value)}\r\n            placeholder=\"Enter Image lable\"\r\n          ></input>\r\n         \r\n          <span style={{ backgroundColor: \"lightGrey\", padding: \"2%\" ,marginTop:'20px'}}>\r\n            <input\r\n              style={{\r\n                backgroundColor: \"lightGrey\",\r\n                height: \"10%\",\r\n                width: \"100%\",\r\n              }}\r\n              type=\"file\"\r\n              // value={file}\r\n              multiple\r\n              onChange={(e) => setfile(e.target.value)}\r\n            ></input>\r\n          </span>\r\n          <br />\r\n          <br />\r\n          <button onClick={addData}>add data</button>\r\n        </form>\r\n      </div>\r\n\r\n      {/* SHOW DATA DIV */}\r\n\r\n      <div>\r\n        <img src=\"\" alt=\"img\" width=\"100\" height=\"50\" />\r\n      </div>\r\n\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestOne;\r\n","C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\TestTwo.js",["51","52","53"],[],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction TestTwo() {\r\n  const [text, settext] = useState();\r\n\r\n  const [file, setfile] = useState();\r\n\r\n  var db;\r\n  var store;\r\n  let requestDB;\r\n//   let store;\r\n\r\n  useEffect(() => {\r\n    const requestDB = window.indexedDB.open('imgDB');\r\n    // db = requestDB.result;\r\n    //  store = db.createObjectStore('imgStore',{autoIncrement:true});\r\n\r\n    requestDB.onupgradeneeded =()=>{\r\n        db = requestDB.result;\r\n        store = db.createObjectStore('imgStore', {autoIncrement:true})\r\n    }\r\n    addData();\r\n\r\n  });\r\n\r\n  const addData=()=>{\r\n    store.add({imageName:text, img:file})\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div style={{ width: \"150px \", height: \"250px\", padding: \"5px\" }}>\r\n          <form>\r\n            <input\r\n              type=\"text\"\r\n              value={text}\r\n              onChange={(e) => settext(e.target.value)}\r\n              placeholder=\"Enter Image lable\"\r\n            ></input>\r\n\r\n            <span\r\n              style={{\r\n                backgroundColor: \"lightGrey\",\r\n                padding: \"2%\",\r\n                marginTop: \"20px\",\r\n              }}\r\n            >\r\n              <input\r\n                style={{\r\n                  backgroundColor: \"lightGrey\",\r\n                  height: \"10%\",\r\n                  width: \"100%\",\r\n                }}\r\n                type=\"file\"\r\n                // value={file}\r\n                multiple\r\n                onChange={(e) => setfile(e.target.value)}\r\n              ></input>\r\n            </span>\r\n            <br />\r\n            <br />\r\n            <button onClick={addData}>add data</button>\r\n          </form>\r\n        </div>\r\n\r\n        {/* SHOW DATA DIV */}\r\n\r\n        <div>\r\n          <img src=\"\" alt=\"img\" width=\"100\" height=\"50\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TestTwo;\r\n","C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\reportWebVitals.js",[],[],"C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\TestThree.js",["54","55","56","57"],[],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction TestThree() {\r\n  const [text, settext] = useState('');\r\n\r\n  const [file, setfile] = useState('');\r\n\r\n  \r\n  var db ;\r\n  var objectStore = null;\r\n  var store;\r\n  var requestDB;\r\n  var transaction;\r\n  console.log(text);\r\n  console.log(file);\r\n\r\nuseEffect(()=>{\r\n\r\n    requestDB = window.indexedDB.open(\"imgDB\");\r\n\r\n    requestDB.onupgradeneeded = () => {\r\n       db = requestDB.result;\r\n       console.log(db) ;\r\n      store = db.createObjectStore(\"imageDB\", {\r\n        autoIncrement: true,\r\n     \r\n      });\r\n      console.log(db);\r\n     \r\n    };\r\n})\r\n\r\n\r\n  const addData = (e) => {\r\n    \r\n    e.preventDefault();\r\n    // store.put({imageName:text, img:file})\r\n    let formData = {\r\n      title:text,\r\n     image: file,\r\n    };\r\n    transaction=db.transaction(\"imageDB\", \"readwrite\");\r\n    console.log(db)\r\n    \r\n    transaction.oncomplete = (value) => {\r\n      console.log(value);\r\n    };\r\n\r\n    transaction.onerror = (err) => {\r\n      console.log(err);\r\n    };\r\n\r\n    store = transaction.objectStore(\"imageDB\");\r\n    let request = store.put(formData);\r\n\r\n    request.onsuccss = (ele) => {\r\n      console.log(\"successfully added\");\r\n    };\r\n\r\n    request.onerror = (ele) => {\r\n      console.log(\"got error\");\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ width: \"150px \", height:\"250px\", padding: \"5px\" }}>\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => settext(e.target.value)}\r\n            placeholder=\"Enter Image lable\"\r\n          ></input>\r\n         \r\n          <span style={{ backgroundColor: \"lightGrey\", padding: \"2%\" ,marginTop:'20px'}}>\r\n            <input\r\n              style={{\r\n                backgroundColor: \"lightGrey\",\r\n                height: \"10%\",\r\n                width: \"100%\",\r\n              }}\r\n              type=\"file\"\r\n              // value={file}\r\n              multiple\r\n              onChange={(e) => setfile(e.target.value)}\r\n            ></input>\r\n          </span>\r\n          <br />\r\n          <br />\r\n          <button onClick={addData}>add data</button>\r\n        </form>\r\n      </div>\r\n\r\n      {/* SHOW DATA DIV */}\r\n\r\n      <div>\r\n        <img src=\"\" alt=\"img\" width=\"100\" height=\"50\" />\r\n      </div>\r\n\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestThree;\r\n","C:\\Users\\sandeepg\\Desktop\\ImageDnD\\imageDnD\\src\\TestFour.js",["58"],[],{"ruleId":"59","severity":1,"message":"60","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":11},{"ruleId":"59","severity":1,"message":"63","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":15},{"ruleId":"59","severity":1,"message":"64","line":7,"column":8,"nodeType":"61","messageId":"62","endLine":7,"endColumn":15},{"ruleId":"59","severity":1,"message":"65","line":8,"column":8,"nodeType":"61","messageId":"62","endLine":8,"endColumn":17},{"ruleId":"59","severity":1,"message":"66","line":2,"column":24,"nodeType":"61","messageId":"62","endLine":2,"endColumn":33},{"ruleId":"67","severity":1,"message":"68","line":43,"column":27,"nodeType":"69","messageId":"70","endLine":43,"endColumn":29},{"ruleId":"59","severity":1,"message":"66","line":2,"column":20,"nodeType":"61","messageId":"62","endLine":2,"endColumn":29},{"ruleId":"59","severity":1,"message":"71","line":11,"column":7,"nodeType":"61","messageId":"62","endLine":11,"endColumn":18},{"ruleId":"59","severity":1,"message":"72","line":11,"column":7,"nodeType":"61","messageId":"62","endLine":11,"endColumn":16},{"ruleId":"73","severity":1,"message":"74","line":20,"column":14,"nodeType":"75","endLine":20,"endColumn":30},{"ruleId":"73","severity":1,"message":"76","line":21,"column":17,"nodeType":"77","endLine":21,"endColumn":71},{"ruleId":"59","severity":1,"message":"71","line":11,"column":7,"nodeType":"61","messageId":"62","endLine":11,"endColumn":18},{"ruleId":"73","severity":1,"message":"78","line":20,"column":17,"nodeType":"77","endLine":20,"endColumn":47},{"ruleId":"73","severity":1,"message":"74","line":23,"column":13,"nodeType":"75","endLine":23,"endColumn":29},{"ruleId":"73","severity":1,"message":"76","line":25,"column":15,"nodeType":"77","endLine":28,"endColumn":9},{"ruleId":"59","severity":1,"message":"79","line":8,"column":9,"nodeType":"61","messageId":"62","endLine":8,"endColumn":11},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'TestOne' is defined but never used.","'TestTwo' is defined but never used.","'TestThree' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'objectStore' is assigned a value but never used.","'requestDB' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'db' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'store' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'requestDB' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'db' is defined but never used."]